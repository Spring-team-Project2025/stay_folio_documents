@startuml
skinparam activityArrowColor Black
skinparam activityBackgroundColor White
skinparam wrapWidth 220
skinparam maxMessageSize 200
title 북마크 추가 흐름 (/api/bookmark/add, POST)

|Controller|
start
:인증 확인 (미로그인 → 401);
:요청 파싱 및 유효성 검사 (siId 없으면 → 400);
:BookmarkService.add(miId, siId);

|Service (Tx)|
if (이미 북마크 존재?) then (Y)
  :status = added;  // idempotent
else (N)
  :BookmarkMapper.insert(miId, siId);
  :StayMapper.incBookmarkCount(siId);
  :status = added;
endif
:count = StayMapper.getBookmarkCount(siId);

|Mapper/DB|
:INSERT INTO bookmark (필요 시);
:UPDATE stay.bookmark_count = count + 1 (필요 시);
:SELECT stay.bookmark_count;

|Controller|
:JSON {status, count} 반환;
stop
@enduml

@startuml
skinparam activityArrowColor Black
skinparam activityBackgroundColor White
skinparam wrapWidth 220
skinparam maxMessageSize 200
title 북마크 삭제 흐름 (/api/bookmark/remove, DELETE) — 선조회 없이 삭제

|Controller|
start
:인증 확인 (미로그인 → 401);
:요청 파싱/검증 (siId 없으면 → 400);
:BookmarkService.delete(miId, siId);

|Service (Tx)|
:deleted = BookmarkMapper.delete(miId, siId); 
if (deleted > 0) then (Y)
  :StayMapper.decBookmarkCount(siId);
endif
:status = removed;  // idempotent: 없어도 최종 상태는 'removed'
:count = StayMapper.getBookmarkCount(siId);

|Mapper/DB|
:DELETE FROM t_stay_bookmarks WHERE mi_id = #{miId} AND si_id = #{siId};
:UPDATE t_stay_info
 SET si_book = GREATEST(NVL(si_book,0) - 1, 0)
 WHERE si_id = #{siId}  (deleted>0 일 때만);

|Controller|
:JSON {status, count} 반환;
stop
@enduml

